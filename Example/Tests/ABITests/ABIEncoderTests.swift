//
//  ABIEncoderTests.swift
//  Bitski_Tests
//
//  Created by Josh Pyles on 5/31/18.
//  Copyright Â© 2018 CocoaPods. All rights reserved.
//

import XCTest
@testable import Bitski
import Web3
import BigInt

class ABIEncoderTests: XCTestCase {
    
    /// From Solidity's documentation examples
    func testExampleOne() {
        let uint = UInt32(69)
        let bool = true
        let signature = "0xcdcd77c0"
        guard let encoded = ABIEncoder.encode(.uint(uint), .bool(bool)) else { return XCTFail("Values should be encoded") }
        let result = signature + encoded
        let expected = "0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
        XCTAssertEqual(result, expected, "Encoded values should match")
    }
    
    /// From Solidity's documentation examples
    func testExampleTwo() {
        let bytes = [
            Data("abc".utf8),
            Data("def".utf8)
        ]
        let signature = "0xfce353f6"
        guard let encoded = ABIEncoder.encode(.fixedArray(bytes, elementType: .bytes(length: 3), length: 2)) else { return XCTFail("Values should be encoded") }
        let result = signature + encoded
        let expected = "0xfce353f661626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000"
        XCTAssertEqual(result, expected, "Encoded values should match")
    }
    
    /// From Solidity's documentation examples
    func testExampleThree() {
        let data = Data("dave".utf8)
        let bool = true
        let array = [BigInt(1), BigInt(2), BigInt(3)]
        let signature = "0xa5643bf2"
        guard let encoded = ABIEncoder.encode(.bytes(data), .bool(bool), .array(array)) else { return XCTFail("Values should be encoded") }
        let result = signature + encoded
        let expected = "0xa5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
        XCTAssertEqual(result, expected, "Encoded values should match")
    }
    
    func testAddressArray() {
        let array = [
            try! EthereumAddress(hex: "0xD11Aa575f9C6f30bEDF392872726b2B157C83131", eip55: false),
            try! EthereumAddress(hex: "0x9F2c4Ea0506EeAb4e4Dc634C1e1F4Be71D0d7531", eip55: false)
        ]
        let test = ABIEncoder.encode(.array(array))
        let expected = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d11aa575f9c6f30bedf392872726b2b157c831310000000000000000000000009f2c4ea0506eeab4e4dc634c1e1f4be71d0d7531"
        XCTAssertEqual(test, expected, "Array of addresses should be encoded correctly")
    }
    
    func testEncodeArray() {
        let array1 = ["abc", "def", "ghi", "jkl", "mno"]
        let test1 = ABIEncoder.encode(.array(array1))
        let expected1 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000364656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003676869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036a6b6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036d6e6f0000000000000000000000000000000000000000000000000000000000"
        
        XCTAssertEqual(test1, expected1, "Dynamic array of dynamic elements should be correctly encoded")
        
        let test2 = ABIEncoder.encode(.fixedArray(array1))
        let expected2 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000364656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003676869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036a6b6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036d6e6f0000000000000000000000000000000000000000000000000000000000"
        
        XCTAssertEqual(test2, expected2, "Fixed array should be correctly encoded")
        
        let array2 = [true, false, true, false]
        let test3 = ABIEncoder.encode(.array(array2))
        let expected3 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
        
        XCTAssertEqual(test3, expected3, "Boolean array should be correctly encoded")
        
        let array3 = [BigInt(1), BigInt(-1), BigInt(2), BigInt(-2)]
        let test4 = ABIEncoder.encode(.array(array3))
        let expected4 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"
        
        XCTAssertEqual(test4, expected4, "Dynamic array of static elements should be correctly encoded")
        
        let array4: [[UInt32]] = [[1,2,3], [4,5,6]]
        let test5 = ABIEncoder.encode(.array(array4))
        let expected5 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006"
        
        XCTAssertEqual(test5, expected5, "Nested array should be correctly encoded")
        
        let test6 = ABIEncoder.encode(.fixedArray(array4, elementType: .array(type: .uint32, length: nil), length: 2))
        let expected
        
        XCTAssertEqual(test6, expected6, "Fixed array of dynamic array should be correctly encoded")
        
        let test7 = ABIEncoder.encode(.fixedArray(array4, elementType: .array(type: .uint64, length: 3), length: 2))
        let expected7 = "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006"
        
        XCTAssertEqual(test7, expected7, "Fixed array of fixed array should be correctly encoded")
    }
    
    func testEncodeArrayStandalone() {
        let array = ["one", "two", "three", "four"]
        let encoded = ABIEncoder.encodeArray(array, to: .array(type: .string, length: nil))
        
        XCTAssertEqual(encoded, "000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000574687265650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004666f757200000000000000000000000000000000000000000000000000000000")
    }
    
}
